# -*- coding: utf-8 -*-
"""codingTest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UsB-qlnzLm1m0RuNOi8ojtcPMIjrThTi
"""

"""
 ██████╗ ██████╗ ██████╗ ██╗███╗   ██╗ ██████╗     ████████╗███████╗███████╗████████╗
██╔════╝██╔═══██╗██╔══██╗██║████╗  ██║██╔════╝     ╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝
██║     ██║   ██║██║  ██║██║██╔██╗ ██║██║  ███╗       ██║   █████╗  ███████╗   ██║   
██║     ██║   ██║██║  ██║██║██║╚██╗██║██║   ██║       ██║   ██╔══╝  ╚════██║   ██║   
╚██████╗╚██████╔╝██████╔╝██║██║ ╚████║╚██████╔╝       ██║   ███████╗███████║   ██║   
 ╚═════╝ ╚═════╝ ╚═════╝ ╚═╝╚═╝  ╚═══╝ ╚═════╝        ╚═╝   ╚══════╝╚══════╝   ╚═╝   
                                                                                     
Coding Challenge Objective:

In a language of your choice, using all best practice principles you’re aware of, could you please provide code that iterates in multiples of A until X, then in multiples of A + 1 until 2X, then multiples of A + 2 until 3X. Please state any assumptions you’ve made.

Please upload to a public Github repository and share the link.

Assumptions:

- The user will want the program to start incrementing from 0

- arguments a and x are positive integers

Parameters:

-a: starting value of which multiples will be provided
-x: the stopping boundry, the program will stop printing values before reaching this value

"""
#SOLUTION 1: Simple program that iterates through the multiples up untill reaching x. It then adjusts the values of c and iterates again e.t.c.

def iterate_1(a,x):
  c = 0
  while c < x:
    c=c+a
    print(c)
  c = 0
  a=a+1
  while c < (2*x):
    c=c+a
    print(c)
  c = 0
  a=a+1
  while c < (3*x):
    c=c+a
    print(c)


#SOLUTION 2: Uses a variable "count" to set up the values of a and x for each iteration.
def iterate_2(a,x):
  count=1
  while count < 4:
    c=0 # counter
    m = a + (count-1) #multiple
    max = x*count #max value we print up to
    c = c + m #update c for first value
    while c <= max:
      if c <= max:
        print(c)
      c = c + m
    count = count+1


iterate_2(5,30)